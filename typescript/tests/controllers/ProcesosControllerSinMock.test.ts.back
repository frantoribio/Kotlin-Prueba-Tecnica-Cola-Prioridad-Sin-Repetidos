import { describe, test, assert, beforeEach, afterEach, expect, vi } from 'vitest'
import Proceso from '../../src/models/Proceso'
import ProcesosController from '../../src/controllers/ProcesosController'
import ColaPrioritariaImp from '../../src/repositories/ColaPrioritariaImp'
import ProcesosException from '../../src/errors/ProcesosException'

// Lo voy a hacer sin Mocks por ahora, lo que sería de integración
// Describimos la suite
describe('Suite de test de Controlador de Procesos', () => {
  let colaPrioritaria: ColaPrioritariaImp
  let procesosController: ProcesosController

  // En cada test creamos la cola
  beforeEach(() => {
    colaPrioritaria = new ColaPrioritariaImp()
    procesosController = new ProcesosController(colaPrioritaria)
  })

  afterEach(() => {
    // vi.clearAllMocks()
  })

  test('debería obtener todos los procesos respetando prioridad', () => {
    const proceso1 = new Proceso(1, 'Proceso 1', 1)
    const proceso2 = new Proceso(2, 'Proceso 2', 2)
    colaPrioritaria.push(proceso1)
    colaPrioritaria.push(proceso2)

    const res = procesosController.getAll()

    expect(res).toEqual([proceso2, proceso1])
    assert.equal(res.length, 2)
    assert.equal(res[0], proceso2)
    assert.equal(res[1], proceso1)
    assert.isTrue(res[0].prioridad >= res[1].prioridad)
  })

  test('debería insertar un proceso', () => {
    const proceso1 = new Proceso(1, 'Proceso 1', 1)

    procesosController.push(proceso1)
    const res = procesosController.getAll()

    expect(res).toEqual([proceso1])
    assert.equal(res.length, 1)
    assert.equal(res[0], proceso1)
  })

  test('debería obtener un proceso', () => {
    const proceso1 = new Proceso(1, 'Proceso 1', 1)

    procesosController.push(proceso1)
    const res = procesosController.getById(1)

    assert.equal(res, proceso1)
  })

  test('debería sacar un proceso', () => {
    const proceso1 = new Proceso(1, 'Proceso 1', 1)

    procesosController.push(proceso1)
    const res = procesosController.pop()

    assert.equal(res, proceso1)
  })

  test('debería ser vacía', () => {
    const res = procesosController.isEmpty()

    assert.isTrue(res)
  })

  test('debería no ser vacía', () => {
    const proceso1 = new Proceso(1, 'Proceso 1', 1)

    procesosController.push(proceso1)

    const res = procesosController.isEmpty()

    assert.isFalse(res)
  })

  test('debería obtener una excepción si proceso no existe al consultar', () => {
    const res = assert.throws(() => {
      procesosController.getById(1)
    }, ProcesosException) as unknown as ProcesosException

    assert.equal(res.message, 'No existe el proceso con id 1')
  })

  test('debería obtener una excepción si proceso no existe al extraer', () => {
    const res = assert.throws(() => {
      procesosController.pop()
    }, ProcesosException) as unknown as ProcesosException

    assert.equal(res.message, 'No existe el procesos o la cola esta vacía')
  })
})
